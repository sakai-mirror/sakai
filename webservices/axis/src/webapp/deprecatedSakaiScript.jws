import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Set;
import java.util.Collection;
import org.sakaiproject.api.kernel.session.Session;
import org.sakaiproject.api.kernel.session.cover.SessionManager;

import org.sakaiproject.service.legacy.authzGroup.AuthzGroup;
import org.sakaiproject.service.legacy.authzGroup.Role;
import org.sakaiproject.service.legacy.user.cover.UserDirectoryService;
import org.sakaiproject.api.kernel.tool.Tool;
import org.sakaiproject.service.legacy.site.ToolConfiguration;
import org.sakaiproject.service.legacy.site.Site;
import org.sakaiproject.service.legacy.site.SitePage;
import org.sakaiproject.service.legacy.user.UserEdit;
import org.sakaiproject.service.legacy.authzGroup.cover.AuthzGroupService;
import org.sakaiproject.service.legacy.user.User;
import org.sakaiproject.api.kernel.tool.cover.ToolManager;
import org.sakaiproject.service.legacy.site.cover.SiteService;
import java.util.Properties;
import org.apache.axis.AxisFault;

import org.sakaiproject.util.xml.Xml;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.Node;
//import org.w3c.dom.NodeList;

public class SakaiScript {
	
	/*
	private String makeStringListDom(Collection strings)
	{
		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);
		
		if (strings == null)
		{
			return "<list/>";
		}
		
		for (Iterator i = strings.iterator(); i.hasNext();)
		{
			Node item = dom.createElement("item");
			item.appendChild(dom.createTextNode((String) i.next()));
			list.appendChild(item);
		}
		
		return Xml.writeDocumentToString(dom);
	}
	*/

public String login(String id,String pw) {
	//System.out.println("login id="+id+" pw="+pw);
	User user = UserDirectoryService.authenticate(id,pw);
	if ( user != null ) {
		//System.out.println("Have User");
		Session s = SessionManager.startSession();
		if (s == null)
		{
			//System.out.println("no session established");
			return "sessionnull";
		}
		else
		{
			s.setUserId(id);
			s.setUserEid(id);
			//System.out.println("session: " + s.getId()
			//	+ " user id: " + s.getUserId()
			//	+ " user enterprise id: " + s.getUserEid()
			//	+ " started: " + new Date(s.getCreationTime()).toLocaleString()
			//	+ " accessed: " + new Date(s.getLastAccessedTime()).toLocaleString()
			//	+ " inactive after: " + s.getMaxInactiveInterval());
			return s.getId();
		}
	}
	return "usernull";
}

private Session establishSession(String id) throws AxisFault 
{
	Session s = SessionManager.getSession(id);

	if (s == null)
	{
		throw new AxisFault("Session "+id+" is not active");
	}
	SessionManager.setCurrentSession(s);
	return s;
}

public String checkSession(String id) {
	Session s = SessionManager.getSession(id);
	if (s == null)
	{
		return "null";
	}
	else
	{
		return id;
	}
}

public String addNewUser( String sessionid, String userid, String firstname, String lastname, String email, String type, String password)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		User addeduser = null;
		addeduser = UserDirectoryService.addUser(userid, firstname, lastname, email, password, type, null);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removeUser( String sessionid, String userid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		UserDirectoryService.removeUser(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String changeUserInfo( String sessionid, String userid, String firstname, String lastname, String email, String type, String password)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setFirstName(firstname);
		userEdit.setLastName(lastname);
		userEdit.setEmail(email);
		userEdit.setType(type);
		userEdit.setPassword(password);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String changeUserName( String sessionid, String userid, String firstname, String lastname)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setFirstName(firstname);
		userEdit.setLastName(lastname);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String changeUserEmail( String sessionid, String userid, String email)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setEmail(email);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String changeUserType( String sessionid, String userid, String type)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setType(type);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String changeUserPassword( String sessionid, String userid, String password)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		UserEdit userEdit = null;
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setPassword(password);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String addNewRealm( String sessionid, String realmid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = null;
		realmEdit = AuthzGroupService.addAuthzGroup(realmid);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removeRealm( String sessionid, String realmid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		AuthzGroupService.removeAuthzGroup(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String addNewRoleToRealm( String sessionid, String realmid, String roleid, String description)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		Role roleEdit = realmEdit.addRole(roleid);
		roleEdit.setDescription(description);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removeAllRolesFromRealm( String sessionid, String realmid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.removeRoles();
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removeRoleFromRealm( String sessionid, String realmid, String roleid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.removeRole(roleid);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String addLockToRole( String sessionid, String realmid, String roleid, String lock)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		Role roleEdit = realmEdit.getRole(roleid);
		roleEdit.allowFunction(lock);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String removeAllLocksFromRole( String sessionid, String realmid, String roleid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		Role roleEdit = realmEdit.getRole(roleid);
		roleEdit.disallowAll();
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String removeLockFromRole( String sessionid, String realmid, String roleid, String lock)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		Role role = realmEdit.getRole(roleid);
		role.disallowFunction(lock);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String setRoleDescription( String sessionid, String realmid, String roleid, String description)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		Role roleEdit = realmEdit.getRole(roleid);
		roleEdit.setDescription(description);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String addUserToRealmWithRole( String sessionid, String userid, String realmid, String roleid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.addMember(userid,roleid,true,false);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String removeUserFromRealm( String sessionid, String userid, String realmid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.removeMember(userid);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removeAllUsersFromRealm( String sessionid, String realmid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.removeMembers();
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String setRoleForRealmMaintenance( String sessionid, String realmid, String roleid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(realmid);
		realmEdit.setMaintainRole(roleid);
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String addNewSite( String sessionid, String siteid, String title, String description, String shortdesc, String iconurl, String infourl, boolean joinable, String joinerrole, boolean published, boolean publicview, String skin, String type)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = null;
		siteEdit = SiteService.addSite(siteid, "");
		siteEdit.setTitle(title);
		siteEdit.setDescription(description);
		siteEdit.setShortDescription(shortdesc);
		siteEdit.setIconUrl(iconurl);
		siteEdit.setInfoUrl(infourl);
		siteEdit.setJoinable(joinable);
		siteEdit.setJoinerRole(joinerrole);
		siteEdit.setPublished(published);
		siteEdit.setPubView(publicview);
		siteEdit.setSkin(skin);
		siteEdit.setType(type);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


public String removeSite( String sessionid, String siteid)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = null;
		siteEdit = SiteService.getSite(siteid);
		SiteService.removeSite(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String copySite( String sessionid, String siteidtocopy, String newsiteid, String title, String description, String shortdesc, String iconurl, String infourl, boolean joinable, String joinerrole, boolean published, boolean publicview, String skin, String type)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site site = SiteService.getSite(siteidtocopy);
		Site siteEdit = SiteService.addSite(newsiteid, site);
		siteEdit.setTitle(title);
		siteEdit.setDescription(description);
		siteEdit.setShortDescription(shortdesc);
		siteEdit.setIconUrl(iconurl);
		siteEdit.setInfoUrl(infourl);
		siteEdit.setJoinable(joinable);
		siteEdit.setJoinerRole(joinerrole);
		siteEdit.setPublished(published);
		siteEdit.setPubView(publicview);
		siteEdit.setSkin(skin);
		siteEdit.setType(type);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String addNewPageToSite( String sessionid, String siteid, String pagetitle, int pagelayout)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = null;
		SitePage sitePageEdit = null;
		siteEdit = SiteService.getSite(siteid);
		sitePageEdit = siteEdit.addPage();
		sitePageEdit.setTitle(pagetitle);
		sitePageEdit.setLayout(pagelayout);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

public String removePageFromSite( String sessionid, String siteid, String pagetitle)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = null;
		siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
				siteEdit.removePage(pageEdit);
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}



public String addNewToolToPage( String sessionid, String siteid, String pagetitle, String tooltitle, String toolid, String layouthints)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
			{
				ToolConfiguration tool = pageEdit.addTool();
				Tool t = tool.getTool();
				
				tool.setTool(ToolManager.getTool(toolid));
				tool.setTitle(tooltitle);
				//toolEdit.setTitle(tooltitle);
				//toolEdit.setToolId(toolid);
				//toolEdit.setLayoutHints(layouthints);
			}
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}



public String addConfigPropertyToTool( String sessionid, String siteid, String pagetitle, String tooltitle, String propname, String propvalue)
{
	Session session = SessionManager.getSession(sessionid);
	SessionManager.setCurrentSession(session);
	try {

		Site siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
			{
				List toolEdits = pageEdit.getTools();
				for (Iterator j = toolEdits.iterator(); j.hasNext();)
				{
					ToolConfiguration tool = (ToolConfiguration) j.next();
					Tool t = tool.getTool();
					//System.out.println("SWG ConfigTitle: " + tool.getTitle());
					//System.out.println("SWG ToolTitle: " + t.getTitle());
					if (tool.getTitle().equals(tooltitle))
					{
						//Properties propsedit = t.getRegisteredConfig();
						Properties propsedit = tool.getPlacementConfig();
						//Enumeration e = propsedit.propertyNames();
						//while(e.hasMoreElements())
						//{
						//	String next = (String) e.nextElement();
						//	System.out.println("SWG PlaceProp: " + next);
						//}
						//System.out.println("SWG Setting ToolConfig");
						propsedit.setProperty(propname, propvalue);
						//t.setRegisteredConfig(propsedit);
						//Enumeration e2 = t.getRegisteredConfig().propertyNames();
						//while(e2.hasMoreElements())
						//{
						//	String next = (String) e2.nextElement();
						//	System.out.println("SWG ToolProp: " + next);
						//}
					}
				}
			}
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

//checkForUser(): a call to check for an existing user
public boolean checkForUser(String sessionid, String userid) throws AxisFault
{
	Session s = establishSession(sessionid);
	try {
		User u = null; 
		u = UserDirectoryService.getUser(userid);
		if (u != null)
			return true;
		else
			return false;
	}
	catch (Exception e)
	{
		return false;
	}
}

// checkForSite(): a call to check for an existing site
public boolean checkForSite(String sessionid, String siteid) throws AxisFault
{
	Session s = establishSession(sessionid);
	try {
		Site site = null;
		site = SiteService.getSite(siteid);
		if (site != null)
			return true;
		else
			return false;
	}
	catch (Exception e)
	{
		return false;
	}
}


public boolean checkForUserInRealmWithRole(String sessionid, String userid, String realmid, String role) throws AxisFault
{
	Session s = establishSession(sessionid);
	try {
		AuthzGroup realm = null; 
		realm = AuthzGroupService.getAuthzGroup(realmid);
		if (realm == null)
			return false;
		else {
			return realm.hasRole(userid, role);
		}
	}
	catch (Exception e) {
		return false;
	}
}

/*
public String getSitesUserCanAccess(String sessionid, String userid) throws AxisFault
{
	Session s = establishSession(sessionid);
	try {
		Set realms = AuthzGroupService.isAllowed(userid, "site.visit", null);
		if (realms == null)
			return "<list/>";
		
		List worksites = new ArrayList();
		for (Iterator i = realms.iterator(); i.hasNext();) {
			String ref = (String) i.next();
			if ((SiteService.isSpecialSite(ref) == false) &&
				(SiteService.isUserSite(ref) == false))
			{
				//TODO: This is probably not the right way to get 
				// the SiteID from a Site Reference
				worksites.add(ref.substring(6));
			}
		}
		
		return makeStringListDom(worksites);
	}
	catch (Exception e) {
		return "<exception/>";
	}
}
*/

}
