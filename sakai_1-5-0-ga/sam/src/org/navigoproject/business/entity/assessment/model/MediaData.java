/*
 *                       Navigo Software License
 *
 * Copyright 2003, Trustees of Indiana University, The Regents of the University
 * of Michigan, and Stanford University, all rights reserved.
 *
 * This work, including software, documents, or other related items (the
 * "Software"), is being provided by the copyright holder(s) subject to the
 * terms of the Navigo Software License. By obtaining, using and/or copying this
 * Software, you agree that you have read, understand, and will comply with the
 * following terms and conditions of the Navigo Software License:
 *
 * Permission to use, copy, modify, and distribute this Software and its
 * documentation, with or without modification, for any purpose and without fee
 * or royalty is hereby granted, provided that you include the following on ALL
 * copies of the Software or portions thereof, including modifications or
 * derivatives, that you make:
 *
 *    The full text of the Navigo Software License in a location viewable to
 *    users of the redistributed or derivative work.
 *
 *    Any pre-existing intellectual property disclaimers, notices, or terms and
 *    conditions. If none exist, a short notice similar to the following should
 *    be used within the body of any redistributed or derivative Software:
 *    "Copyright 2003, Trustees of Indiana University, The Regents of the
 *    University of Michigan and Stanford University, all rights reserved."
 *
 *    Notice of any changes or modifications to the Navigo Software, including
 *    the date the changes were made.
 *
 *    Any modified software must be distributed in such as manner as to avoid
 *    any confusion with the original Navigo Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * The name and trademarks of copyright holder(s) and/or Indiana University,
 * The University of Michigan, Stanford University, or Navigo may NOT be used
 * in advertising or publicity pertaining to the Software without specific,
 * written prior permission. Title to copyright in the Software and any
 * associated documentation will at all times remain with the copyright holders.
 * The export of software employing encryption technology may require a specific
 * license from the United States Government. It is the responsibility of any
 * person or organization contemplating export to obtain such a license before
 * exporting this Software.
 */

package org.navigoproject.business.entity.assessment.model;

import java.io.Serializable;

import java.util.Date;

/**
 * A class to hold media information.  It can be referred to by location or by
 * actual content stored in the database, and the type, recorder, and player
 * offer information on how to view and edit it.  It can be a component, or
 * code inline in HTML rich text.  If this is just a text link
 * to another page (i.e. a URL) then isLink is true, and only location and
 * type need to be filled out.  If the media is a link or tag inline in HTML
 * code generated by a WYSIWYG editor, then isHtmlInline is true, otherwise it
 * is false.
 *
 * @author Rachel Gollub
 * @author Qingru Zhang
 * @author Ed Smiley
 */
public class MediaData
  implements Serializable
{
  int mediaId;
  private String location;
  private boolean isLink;
  private boolean isHtmlInline;
  private int typeId;
  private String type;
  private String iconurl;
  private String name;
  private String description;
  private String author;
  private String filename;
  private String recorder;
  private String player;
  private byte[] content;
  private Date dateAdded;
  private String mapId;
  private String position;

  /**
   * This sets a default map id, used for finding new media as they're added,
   * if there's no actual id.
   */
  public MediaData()
  {
    mapId = "new" + new Double(Math.random()).toString();
  }

  /**
   * Gets integer id for media.
   * @return the id
   */
  public int getId()
  {
    return mediaId;
  }

  /**
   * Sets integer id for media.
   *
   * @param id the id
   */
  public void setId(int id)
  {
    mediaId = id;
  }

  /**
   * Get the location of the resource.
   *
   * @return location String:
   * <ul>
   * <li><i>http:, https</i>: web location</li>
   * <li><i>file://</>: local filesystem location on host</li>
   * </ul>
   */
  public String getLocation()
  {
    if(location != null)
    {
      return location;
    }
    else
    {
      return "";
    }
  }

  /**
   * Set the location of the resource.
   *
   * @param plocation:
   * <ul>
   * <li><i>http:, https</i>: web location</li>
   * <li><i>file://</>: local filesystem location on host</li>
   * </ul>

   */
  public void setLocation(String plocation)
  {
    location = plocation;
  }

  /**
   * Pseudonym for getIsLink().
   *
   * Is this a link, or has data been persisted?  If this is just a text link
   * to another page (i.e. a URL) then isLink is true, and only location and
   * type need to be filled out.
   *
   * @return true if it is a link, false otherwise.
   */
  public boolean isLink()
  {
    return isLink;
  }

  /**
   *
   * Is this a link, or has data been persisted?  If this is just a text link
   * to another page (i.e. a URL) then isLink is true, and only location and
   * type need to be filled out.
   *
   * @return true if it is a link, false otherwise.
   */
  public boolean getIsLink()
  {
    return isLink;
  }

  /**
   * Pseudonym for setIsLink().
   *
   *
   * Is this a link, or has data been persisted?  If this is just a text link
   * to another page (i.e. a URL) then isLink is true, and only location and
   * type need to be filled out.
   *
   * @param pisLink true if it is a link, false otherwise.
   */
  public void setLink(boolean pisLink)
  {
    isLink = pisLink;
  }

  /**
   *
   * Is this a link, or has data been persisted?  If this is just a text link
   * to another page (i.e. a URL) then isLink is true, and only location and
   * type need to be filled out.
   *
   * @param pisLink true if it is a link, false otherwise.
   */
  public void setIsLink(boolean pisLink)
  {
    isLink = pisLink;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public int getTypeId()
  {
    return typeId;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param ptypeId DOCUMENTATION PENDING
   */
  public void setTypeId(int ptypeId)
  {
    typeId = ptypeId;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getType()
  {
    return type;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param ptype DOCUMENTATION PENDING
   */
  public void setType(String ptype)
  {
    type = ptype;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getIconUrl()
  {
    return iconurl;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param piconurl DOCUMENTATION PENDING
   */
  public void setIconUrl(String piconurl)
  {
    iconurl = piconurl;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public boolean getIsImage()
  {
    if(type == null)
    {
      return false;
    }

    if(type.indexOf("image") > -1)
    {
      return true;
    }

    return false;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getName()
  {
    return name;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pname DOCUMENTATION PENDING
   */
  public void setName(String pname)
  {
    name = pname;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getDescription()
  {
    return description;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pdescription DOCUMENTATION PENDING
   */
  public void setDescription(String pdescription)
  {
    description = pdescription;
  }

  /**
   * Get author metadata.
   *
   * @return author metadata
   */
  public String getAuthor()
  {
    return author;
  }

  /**
   * Set author metadata.
   *
   * @param pauthor author metadata
   */
  public void setAuthor(String pauthor)
  {
    author = pauthor;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getFileName()
  {
    return filename;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pname DOCUMENTATION PENDING
   */
  public void setFileName(String pname)
  {
    filename = pname;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getRecorder()
  {
    return recorder;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param precorder DOCUMENTATION PENDING
   */
  public void setRecorder(String precorder)
  {
    recorder = precorder;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getPlayer()
  {
    return player;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pplayer DOCUMENTATION PENDING
   */
  public void setPlayer(String pplayer)
  {
    player = pplayer;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public byte[] getContent()
  {
    return content;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pcontent DOCUMENTATION PENDING
   */
  public void setContent(byte[] pcontent)
  {
    content = pcontent;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public Date getDateAdded()
  {
    return dateAdded;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pAdded DOCUMENTATION PENDING
   */
  public void setDateAdded(Date pAdded)
  {
    dateAdded = pAdded;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getMapId()
  {
    if(mediaId > 0)
    {
      return new Integer(mediaId).toString();
    }
    else
    {
      return mapId;
    }
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param pmapId DOCUMENTATION PENDING
   */
  public void setMapId(String pmapId)
  {
    mapId = pmapId;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @return DOCUMENTATION PENDING
   */
  public String getPosition()
  {
    return position;
  }

  /**
   * DOCUMENTATION PENDING
   *
   * @param newPosition DOCUMENTATION PENDING
   */
  public void setPosition(String newPosition)
  {
    position = newPosition;
  }

  /**
   * Is this media item part of HTML code?
   * @return true if it is, else false.
   */
  public boolean getHtmlInline()
  {
    return isHtmlInline;
  }

  /**
   * Is this media item part of HTML code?
   * @param pIsHtmlInline sets it true if it is, else false.
   */
  public void setHtmlInline(boolean pIsHtmlInline)
  {
    isHtmlInline = pIsHtmlInline;
  }

  /**
   * Pseudonym for getHtmlInline().
   *
   * Is this media item part of HTML code?
   * @return true if it is, else false.
   */
  public boolean getIsHtmlInline()
  {
    return isHtmlInline;
  }

  /**
   * Pseudonym for setHtmlInline().
   *
   * Is this media item part of HTML code?
   * @param pIsHtmlInline sets it true if it is, else false.
   */
  public void setIsHtmlInline(boolean pIsHtmlInline)
  {
    isHtmlInline = pIsHtmlInline;
  }

}
