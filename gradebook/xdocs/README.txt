Where are you?
--------------

The xdocs directory contains user-generated documentation. Javadocs and test
reports generated by maven are located in "target/docs".


Building the Gradebook within Sakai
-----------------------------------

The safest way is to start from the top Sakai directory (the parent of the
"gradebook" directory) and build the entire suite with "maven sakai".

Once you've done that, though, if for some reason you wish to re-build and re-
deploy just the Gradebook application, you can start in the "gradebook"
directory and run "maven sakai".


Building the Gradebook standalone
---------------------------------

1) You'll need to build Sakai in order to generate some JARs on which the
standalone Gradebook depends. Start at the top sakai directory and run "maven
sakai".

2) Edit "gradebook/tool/project.properties" to match your build environment.
(Or you can override individual properties on the command line.) Edit a
"hibernate.properties" file to set up the database you want. By default the one
in "gradebook/tool/src/hibernate/hibernate.properties" is used, but you can
point to a different directory by changing the "hibernate.properties.dir"
property. See "DatabaseSupport.txt" for sample database setups. Make sure that
the database specified in your hibernate.properties file has been created.

3) The Gradebook uses the Section Awareness interface to collect information on
course enrollments and user roles. Before building the Gradebook, you need to
build this integration support. Here's an example script for my local WinXP
build:

  # Start in the "sections" module, not the "gradebook" module.
  cd ../sections

  # Build Section Management, Section Awareness, and integration support.
  maven  -Dmode=standalone -Dhibernate.properties.dir=C:/java/sakai-trunk/sakai/gradebook/tool/src/hibernate cln bld

  # Initialize my local database with the Section Awareness tables.
  maven  -Dmode=standalone -Dmem=false -Dhibernate.properties.dir=C:/java/sakai-trunk/sakai/gradebook/tool/src/hibernate schema

  # Go back to the Gradebook.
  cd ../gradebook/

  # Regular standalone build and deploy to my test Tomcat server.
  maven -Dstandalone=true cln bld

  # Initialize my local database with the Gradebook tables.
  maven -Dstandalone=true schema

4) If you want, you can load your local database with test data.

  maven -Dstandalone=true load-full

After starting your test Tomcat server, you can then go to the following URL
and browse the test data as an instructor, student, or teaching assistant:

  http://localhost:8080/sakai-gradebook-tool/


Standalone database settings
----------------------------

By default, Gradebook's automatic unit testing uses an in-memory Hypersonic
database, and the standalone Gradebook application uses a file-system-based
Hypersonic database. Sakai licensing rules keep us from incorporating the
Oracle or MySQL JDBC libraries in the application's standard build, and so if
you wish to use either of those databases, you'll need to uncomment the
appropriate Maven dependency lines in the file "gradebook/tool/project.xml".
(Look for "<groupId>mysql</groupId>" and "<groupId>oracle</groupId>".) The
Oracle JDBC libary isn't available through normal open source channels, and so
you'll have to add that to your local Maven repository manually.

As mentioned above, you then need to create your database and set up a
"hibernate.properties" file that can connect to it. You'll find a sample
"hibernate.properties" file for Hypersonic (hsqldb) in
"gradebook/tool/src/hibernate/hibernate.properties".

Here's a sample for MySQL:

  hibernate.connection.driver_class=com.mysql.jdbc.Driver
  hibernate.connection.url=jdbc:mysql://localhost/sakaigb
  hibernate.connection.username=gbuser
  hibernate.connection.password=gbpwd
  hibernate.dialect=net.sf.hibernate.dialect.MySQLDialect
  hibernate.show_sql=false
  hibernate.hbm2ddl.auto=update

And one for Oracle:

  hibernate.connection.driver_class=oracle.jdbc.driver.OracleDriver
  hibernate.connection.url=jdbc:oracle:thin:myschool.edu:1521:dbname
  hibernate.connection.username=gbname
  hibernate.connection.password=gbpwd
  hibernate.dialect=net.sf.hibernate.dialect.Oracle9Dialect
  hibernate.show_sql=false
  hibernate.hbm2ddl.auto=update
