
[pic] |Changing the Appearance of the Sakai 2.0 Portal | |

Background  1


Creating a skin  2

  Getting started      3
  The Portal     4
  The Site Navigation  6
    The mast head 8
    Login framework    9
    The tabs      10
  The site area  11
    Structure     11
    Site navigation    11
    Footer  12
    Content 12
    Tool title    13

Appendix A- block structure diagram     16


Appendix B- customizing for site types  17


Appendix C- helpful links    18

  Sakai installation   18
  Support   18
  Demonstration file   18

Appendix D- Post 2.0 changes 19

  2.0.1     19


Background


This document is intended for a simple purpose: modifying Sakai 2.0 to
reflect a look and feel consonant with your institution. It will try to
guide you through the job of modifying the default look of Sakai. By way of
example we will be creating a new skin on this basis for a hypothetical
university. It assumes only knowledge of HTML and CSS. Installing and
running your own local version of Sakai is almost a must.

Note: there have been some significant changes to the framework from Sakai
1.5 to Sakai 2.0.  I will indicate where this is the case to help
transition any skins made for 1.5 to 2.0.

There are two types of skins: portal skins and tool skins. This document
addresses only portal skins, as this is were the need to brand an
installation will probably manifest itself more clearly. A separate
document addresses tool skins. However, since some of the definitions for
the portal live in the tool css, here is an explanation of how the 2
interact and how things work in general.

A site will be associated with a skin via some mechanism:

   1. a server configuration file setting points to that skin as a default
   2. the admin interface has been used to point to that skin
   3. Users pick an appearance during site creation

This association consists of a string: "architecture", "oncourse",
"foothills", etc.  If there is no association both tools and portal will be
associated with the default skin - identified with the string "default"

The servlet (Charon) that constructs the portal will output a link to the
corresponding CSS in the file system.

      <link href="/library/skin/rtl/portal.css" type="text/css"
      rel="stylesheet" media="all" />

Tools function similarly, putting 2 links in the response:

<link href="/library/skin/tool_base.css" type="text/css" rel="stylesheet"
media="all" />
<link href="/library/skin/rtl/tool.css" type="text/css" rel="stylesheet"
media="all" />

This is the structure of the skin directory simplified (as it is in the
running instance, not the source)

1 /library/skin/
      tool_base.css
      1default
            tool.css
            portal.css
            1images
      1skin1
            tool.css
            portal.css
            1images
      1skin2
            tool.css
            portal.css
            1images

etc...

1.5 > 2.0  Note


The directory structure has been radically simplified from 1.5. There no
longer is a portalskins directory where the portal rendering information is
kept - the 3 components that make a skin (tool, portal and images) all live
in the same directory now.


Creating a skin


In the Sakai layout framework all elements are addressable via CSS
definitions, either through their ID, CLASS, or via inheritance because
that element is a child of an addressable parent element.

There will be gaps in this coverage that we hope will be identified as new
skins with new design needs are developed.  Please call attention to these
by notifying: <gsilver-at-umich.edu >

What we will do is go through the steps required to create a new skin on
the basis of the default Sakai skin.

Getting started


Copy the /library/skin/default directory and rename as below.  Reminder: we
are working on a deployed version, not the source


|Before                           |After                            |
|                                 |                                 |
|1library/skin                    |1 library/skin                   |
|tool_base.css                    |tool_base.css                    |
|1default                         |1default                         |
|tool.css                         |tool.css                         |
|portal.css                       |portal.css                       |
|1images                          |1images                          |
|                                 |1new_skin                        |
|                                 |tool.css                         |
|                                 |portal.css                       |
|                                 |1images                          |

If you are running your own version locally, which you should seriously
consider (see appendix for links) and you can modify the server
configuration service's bean registration in \components\sakai2-legacy-
components\WEB-INF\components.xml (path is in deployed version of tomcat
root) to point to new_skin as the default skin, so:

      <!-- this is the default skin -->
      <prop key="skin.default">new_skin</prop>
      <!-- this is the path to the skin repository -->
      <prop key="skin.repo">/library/skin</prop>

You will need to restart tomcat for this to have an effect.

Again - if you see gaps in the "addressability" issue, and I will assume
you will, or if you have any suggestions for improvements (I assume you
will too!) - do contact <gsilver-at-umich.edu >.

Note - if your local Sakai instance is compiled from CVS source, work in
the deployed version, not in the source. If you work in the source and
compile and deploy after every small change to see how things look you will
go melancholy mad. Just make sure that you save your changes elsewhere so
if you do run maven to recompile and redeploy you do not loose your work.


The Portal


The portal consists of 3 main areas, the site navigation, the site area,
the footer. We will deal with each in turn.

[pic]

Here is the dehydrated structure of the portal, color coded in reference to
the above. If the node has no descendants other than text nodes, it will
show as closed (so: <stuff />)

|  |<xhtml>                                           |            |
|  |  <body>                                          |            |
|  |    <iframe class="sitenav-max or sitenav-log or  |            |
|  |sitenav-min">                                     |            |
|  |      <iframe-html>                               |            |
|  |        <body>                                    |            |
|  |         < div class="siteNavBlock">              |Holds the   |
|  |<table class="mast-head">                         |logos and on|
|  |<tr>                                              |the right   |
|  |<td class="left"><img /></td>                     |the login   |
|  |<td class="middle"><img /></td>                   |form or the |
|  |<td class="right"><form /></td>                   |logout link |
|  |</tr>                                             |            |
|  |</table>                                          |            |
|  |          <div class="tabholder sitetype">        |Note        |
|  |                                                  |optional    |
|  |                                                  |sitetype    |
|  |                                                  |class see   |
|  |                                                  |note below. |
|  |            <table>                               |            |
|  |              <tr>                                |            |
|  |                <td class="tabCell">              |            |
|  |                  <ul id="tabNavigation">         |The tabs.   |
|  |                                                  |"selectedTab|
|  |                                                  |{" is where |
|  |                                                  |you are at. |
|  |                    <li>                          |            |
|  |                      <a/>                        |            |
|  |                    </li>                         |            |
|  |                    <li class="selectedTab">      |            |
|  |                      <a/>                        |            |
|  |                    </li>                         |            |
|  |                  </ul>                           |            |
|  |                </td>                             |            |
|  |                <td class="selectCell">           |            |
|  |                  <select>                        |If more than|
|  |                                                  |5 tabs,     |
|  |                                                  |select item |
|  |                                                  |for the rest|
|  |                                                  |of sites    |
|  |                    <option/>                     |            |
|  |                  </select>                       |            |
|  |                </td>                             |            |
|  |              </tr>                               |            |
|  |            </table>                              |            |
|  |          </div>                                  |            |
|  |          <div class="divColor" id="tabBottom"/>  |            |
|  |</div>                                            |            |
|  |        </body>                                   |            |
|  |      </iframe-html>                              |            |
|  |    </iframe>                                     |            |
|  |    <div id="container" class="sitetype">         |Note        |
|  |                                                  |optional    |
|  |                                                  |sitetype    |
|  |                                                  |class see   |
|  |                                                  |note below. |
|  |      <div class="divColor" id="sidebar">         |            |
|  |        <div id="divLogo">                        |            |
|  |         <p id="siteType" />                      |            |
|  |         <p id="siteStatus" />                    |            |
|  |        </div>                                    |            |
|  |        <div id="leftnavlozenge">                 |            |
|  |          <ul>                                    |Links to    |
|  |                                                  |tools       |
|  |            <li>                                  |            |
|  |              <a/>                                |            |
|  |            </li>                                 |            |
|  |            <li class="selected">                 |            |
|  |              <a/>                                |            |
|  |            </li>                                 |            |
|  |          </ul>                                   |            |
|  |        </div>                                    |            |
|  |        <div class="sideBarText" id="pres_title"/>|Title for   |
|  |                                                  |presence    |
|  |                                                  |iframe      |
|  |        <iframe id="presence">                    |            |
|  |          <iframe-html>                           |            |
|  |            <body>                                |            |
|  |              <div class="presenceList">          |Users       |
|  |                                                  |present list|
|  |                                                  |inside this |
|  |                                                  |iframe      |
|  |                <span                             |            |
|  |class="chefPresenceListItem"/>                    |            |
|  |              </div>                              |            |
|  |            </body>                               |            |
|  |          </iframe-html>                          |            |
|  |        </iframe>                                 |            |
|  |      </div>                                      |            |
|  |      <div id="content">                          |            |
|  |        <div>                                     |            |
|  |          <div class="portletltitlewrap">         |Tool title  |
|  |            <iframe class="portletTitleIframe"/>  |            |
|  |          </div>                                  |            |
|  |          <div class="portletMainWrap">           |Tool        |
|  |           <iframe class="portletMainIframe"/>    |            |
|  |          </div>                                  |            |
|  |        </div>                                    |            |
|  |      </div>                                      |            |
|  |      <div align="center" id="footer">            |Footer stuff|
|  |        <div class="footerExtNav" align="center"> |            |
|  |          <a/>                                    |            |
|  |        </div>                                    |            |
|  |        <div id="footerInfo">                     |            |
|  |          <a/>                                    |            |
|  |          <br/>                                   |            |
|  |          <span class="sakaiCopyrightInfo"/>      |            |
|  |          <br/>                                   |            |
|  |        </div>                                    |            |
|  |      </div>                                      |            |
|  |    </div>                                        |            |
|  |  </body>                                         |            |
|  |</xhtml>                                          |            |
|  |                                                  |            |


1.5 > 2.0  Note


Following suggestions collected from people working on customizing 1.5, the
structure has changed. In brief:

   1. the site navigation components in the top iframe are now wrapped in a
      block classed siteNavBlock (line 6)
   2. The cells for the tabs and the select item have also now been classed
      (line 6)
   3. The div id="divLogo" now has 2 possible <p> children - to display site
      status (published or unpublished) and site types (course and project)
      - only unpublished and project sites will be affected (line 35, 36)
   4. The names of the blocks that wrap tool iframes (needed to keep
      Internet Explorer iframes in the proper bounds) have changed
      (portletTitleWrap, portletMainWrap) - lines 61-66
   5. All inline css has been removed - except for the unclassed divs that
      lay out tools in the site area - as their widths needed to be
      programmatically generated.
   6. The type of site now has a presence in the output. This is useful if
      you want to render one type of site slightly differently from another.
      See lines 7 and 32 and Appendix B

The Site Navigation


The Top Area lives at present inside an iframe. The contents of this iframe
respond to 3 different states: user not logged in, user logged in (show
mast head), user logged in (mast head does not show). The iframe then has
three corresponding classes:

      sitenav-max (user logged in - show institutional branding)
      sitenav-log (user not logged in - show login form and branding)
      sitenav-min (user logged in or not -no institutional branding)

The children of the iframed document's body are

      <div class="siteNavBlock">
        <table class="mast-head">
           <tr>
                 <td class="left">
                       <img /> Institutional logo image
                 </td>
                 <td class="middle">
                       <img /> Institutional banner image
                 </td>
                 <td class="right">
                       Login form or log out link
                 </td>
           </tr>
        </table>
        <div class="tabHolder">
           <table border="0" cellspacing="0" cellpadding="0">
                 <tr>
                       <td class="tabCell">
                            <ul id="tabNavigation">
                                  <li><a>Link</a></li>
                                  <li><a> Link </a></li>
                                  <li><a> Link </a></li>
                                  <li class="selectedTab"><a>Link</a></li>
                            </ul>
                       </td>
                       <td class="selectCell">
                            Select item if more that the default max tab
        no.
                       </td>
                 </tr>
           </table>
        </div>
        <div class="divColor" id="tabBottom"><br/></div>
      </div>

What we will do with this framework is change it from:

Login version

[pic]

Logged in version

[pic]

To this (I am sure you can do better!):

Login version
[pic]

Logged in version
[pic]

The top area that lives inside of the iframe has 2 parts (see structure
above) - the .mast-head table and the .tabholder block. Both are wrapped in
a top level child of <body>: <div class="siteNavBlock">

Note: there is also another possible state of the top area iframe: gallery
mode. In this mode the whole .mast-head block is hidden. The only thing to
worry about then is the height of the iframe, addressable in the CSS
through its corresponding class - "sitenav-min" - to test this mode, edit
any URL by adding "/gallery" after the "/portal" part, so:

      http://localhost:8080/portal/site/~admin

to

      http://localhost:8080/portal/gallery/site/~admin

We will deal with this mode in more detail later on.

The mast head


The first thing we will do is give the siteNavBlock a margin, and change
the body to use different fonts and a background color to create the left
and right blue bars.

|Before                              |After                         |
|(default/portal.css)                |(new_skin/portal.css)         |
|.siteNavBlock{}                     |.siteNavBlock{                |
|                                    |margin-left:1em;              |
|                                    |margin-right:1em;             |
|                                    |height:3.5em;}                |
|body{                               |body{                         |
|width:100%;                         |width:100%;                   |
|padding:0;                          |padding:0;                    |
|font-family:Verdana,Geneva,Arial,Hel|font-family: 'Trebuchet MS',  |
|vetica,sans-serif; }                |Verdana, sans-serif;          |
|                                    |background-color:#6699CC}     |

We will give the .mast-head a different text color, background color and
remove the default background-image.

|Before                    |After                                   |
|.mast-head{               |.mast-head{                             |
|width:100%;               |width:100%;                             |
|margin:0;                 |margin:0;                               |
|font-size:.8em;           |font-size:.8em;                         |
|color:#084A87;            |color:#fff;                             |
|background:               |background-color:#9C6}                  |
|url(images/headback.gif)  |                                        |
|repeat-x #084A87; }       |                                        |

We will also change the color of links in the .right cell of the table.

|Before                    |After                                   |
|.mast-head td.right       |.mast-head td.right a,.mast-head .right |
|a,.mast-head .right       |a:visited{                              |
|a:visited{color:#084A87}  |color:#fff}                             |
|.mast-head td.right       |.mast-head td.right a:hover{            |
|a:hover{color:#000;       |color:#fff; text-decoration:none; }     |
|text-decoration:none; }   |                                        |

Now we will change the institutional logo
new_skin/images/logo_inst.gif to this simple thing:

[pic]

We are not going to use a banner. Since the servlet is going to put in the
response an <img> for the banner inside the middle cell of the mast-head
table - we will need to address this in the css. The rest of the mast-head
definitions are also simplified.

|Before                    |After                                   |
|N/A                       |.mast-head td.middle img{display:none}  |
|.mast-head                |.mast-head td.left{}                    |
|td.left{background:       |                                        |
|url(images/headmid.gif)   |                                        |
|repeat-x #084A87; }       |                                        |
|                          |                                        |

Some things that can be added here - 1) a background image for mast-head
(and then adjusting the logos to have that as background); 2) doing away
with the logo (keep in file system but set it's display:none); 3) alignment
of the images with text-align and vertical-align; etc.

This is where we are at the moment, more or less.

[pic]

Login framework

Your institution may opt for the login link above, directing the user to an
external enterprise login screen already in use. If so, good. Your
institution may opt for a login displayed within Sakai, however.

If so the form will appear in the table td.right  area above, where the
Login link is displayed. The form will consist of the following structure:

<form>
      Text label
      <input type="text" />
      Text label
      <input type="password" />
      <input type="submit" id="submit"/>
</form>

All of these are fully contextually addressable as descendants of td.right.
 The only issue is if you want to differentiate between the 3 types of
inputs - a certain browser does not understand attribute selectors - so the
<input type="submit" /> has been id'd button to help out in this.
Note: to toggle both possible login modes - change the server configuration
service's bean registration in \components\sakai2-legacy-components\WEB-
INF\components.xml

   <prop key="top.login">true</prop> (( login link)
   <prop key="top.login">false</prop> (( login form)

You can also use an image as the anchor of the login link. Use a property
in the sakai.properties file to point to that image - like so:

      login.icon=/library/image/login.gif

You will need to restart tomcat to see the changes.


The tabs

The original basis for the tabs is a simplified version of what Terence
Ordona did for uPortal (http://www.imaputz.com/uportal/tabstyles.html).

   <div class="tabHolder">
      <table border="0" cellspacing="0" cellpadding="0">
            <tr>
                  <td class="tabCell">
                       <ul id="tabNavigation">
                             <li><a>Link</a></li>
                             <li><a> Link </a></li>
                             <li><a> Link </a></li>
                             <li class="selectedTab"><a>Link</a></li>
                       </ul>
                  </td>
                  <td class="selectCell">
                       Select item if more that the default max tab no.
                  </td>
            </tr>
      </table>
   </div>
   <div class="divColor" id="tabBottom"><br/></div>

At the core - it is simply an unordered list. In Sakai the parent of this
list is a table, it's parent a block (. tabHolder ).

In our example we are not modifying the Sakai default tab display. The
portal skinning guide for 1.5 contains an example of radical surgery to
this area. A great source in this matter is Terence Ordona's excellent site
for uPortal: http://www.imaputz.com/uportal/tabstyles.html), etc.

The last remaining thing to be done is adjusting the height of the top
iframe to make things fit now - given that we have changed the height of
the logo.

.sitenav-log{height:58px} /*user not logged in*/
.sitenav-max{height:90px}  /*user logged in*/
.sitenav-min{height:32px}  /*no logos or banners*/

Use whatever measurement option you feel comfortable with above (px, em,
etc.). I have struggled to make the size of the iframe relative to font
size settings but found in the end that pixels produce the least troubles.

Here is the end result.

[pic]


The site area


Structure

The structure is simple:

      <div id="container ">
            <div class="divColor " id="sidebar ">
                  There are 2 possible <p> here
                  site navigation
            </div>
           <div id="content ">
                 tools
            </div>
      </div>

The default Sakai skin has the navigation on the left, the content on the
right. Since they are basic blocks, these can be positioned anywhere. The
skinning guide for 1.5 had an example of placing the tool navigation on top
- which is nice as it frees up a lot of horizontal space. Follow that
(there are no differences of note between 1.5 and 2.0 on this matter) if
you want that layout. If you are deploying in a right to left language
setting, change the directions of the floats, for example (see rtl
demonstration files in that case).

All we are going to do with the site area is simplify and unboxify things a
bit.

Site navigation


To review - the site navigation container (#leftnavlozenge) is the child of
the following nodes:

      <div id="container">
            <div id="sidebar">
                  <div id="leftnavlozenge">
                  <div>
            </div>
            <div id="content">
                  tools
            </div>
      </div>


We will change the unordered list defined contextually as the child of the
#leftnavlozenge block.

|Before                     |After                                  |
|#leftnavlozenge ul {       |#leftnavlozenge ul{                    |
|list-style:none;           |list-style:none;                       |
|margin: 0px 0px 0px 5px;   |margin: 0px 0px 0px 5px;               |
|padding:0;                 |padding:0;}                            |
|border-top: 1px solid      |                                       |
|#90A1C6;}                  |                                       |

The list items no longer need's visible borders.

|Before                             |After                          |
|#leftnavlozenge li{margin:0px;     |#leftnavlozenge li{            |
|width:auto;                        |margin:0px;                    |
|color: #5A6D95;                    |border:1px solid #fff;         |
|background: #FFF;                  |width:auto;                    |
|padding: 0px;                      |color: #5A6D95;                |
|border-right: 1px solid #90A1C6;   |background: #FFF;              |
|border-bottom: 1px solid #90A1C6;  |padding: 0px;                  |
|border-left: 1px solid #90A1C6;    |}                              |
|}                                  |                               |

The decoration of the links inside the list items is severely reduced -
this applies to the links, the selected link, and the hover

|Before                             |After                          |
|#leftnavlozenge li a:link,         |#leftnavlozenge li a:link,     |
|#leftnavlozenge li a{              |#leftnavlozenge li a{          |
|display: block;                    |display: block;                |
|text-decoration: none;             |text-decoration: none;         |
|background: #F0F0F0                |color: #5A6D95;                |
|url(images/linkoff.gif) no-repeat  |padding: 2px 0px 2px 4px;      |
|right;                             |}                              |
|color: #5A6D95;                    |                               |
|padding: 2px 0px 2px 4px;          |                               |
|}                                  |                               |
|#leftnavlozenge li                 |#leftnavlozenge li             |
|a.selected,#leftnavlozenge li      |a.selected,#leftnavlozenge li  |
|a:hover{                           |a:hover{                       |
|display: block;                    |display: block;                |
|text-decoration: none;             |text-decoration: none;         |
|background: #E7EAF1                |color: #5A6D95;                |
|url(images/linksel.gif) no-repeat  |padding: 2px 0px 2px 4px;      |
|right;                             |}                              |
|color: #5A6D95;                    |                               |
|padding: 2px 0px 2px 4px;          |                               |
|}                                  |                               |

The container (#container ) gets the same margins as the site navigation
area, so that the background color of the portal body forms two blue
margins.

      #container{ background: #FFF; margin-left:1em;margin-right:1em; }


Footer


We have not dealt with the footer in this example. Take a look at the
examples in a normal Sakai distribution for possible treatments.

Content


To review - the content area is the child of the following:

      <div id="container">
            <div id="sidebar">
            </div>
            <div id="content">
                  tools
            </div>
      </div>

The content area is a set of nested divs that lays out the tools in a grid,
in a two column or in a one column layout depending on the page.

Each tool is blocked out as follows:

   <div (properties depend on page layout, are set)>
      <div class="portletTitleWrap">
            <iframe class="portletTitleIframe "/>
      </div>
      <div class="portletMainWrap">
            <iframe class="portletMainIframe"/>
      </div>
   </div>

The first iframe folds the title of the tool, as well as links to the
different actions that can be performed in this channel. The second iframe
folds the tool's content. The parent wrappers are an expedient to prevent
Internet Explorer from doing the bad thing (ignoring the bounds and
expanding horizontally randomly)

There are any number of things that could be changed here, as most
everything is addressable. Starting with the tool iframe we will just get
rid of the iframe border; we will also change the title iframe
characteristics

|Before                             |After                          |
|.portletMainIframe{                |.portletMainIframe{            |
|border: 1px solid #90A1C6;         |text-align:left;               |
|text-align:left;                   |margin-bottom:.5em;            |
|width:95%;                         |height:auto;}                  |
|margin-bottom:.5em;                |                               |
|height:auto}                       |                               |
|.portletTitleIframe{               |.portletTitleIframe{           |
|width:95.2% !important;            |margin:0 !important;           |
|margin:0 !important;               |height:1.5em;                  |
|height:1.3em;}                     |border-bottom:2px solid        |
|                                   |#084A87}                       |



Tool title

We are going to go from:

[pic]

To

[pic]

Since the tool title lives in a tool inside of an iframe, and not on the
portal, we need to modify the tool css, which can be found at
new_skin/tool.css in your new directory.

The title content is contained in a table with this structure:

      <table class="tooltitle">
            <tr>
                  <td class="title">
                       Links, title
                  </td>
                  <td class="action">
                       More links
                  </td>
            </tr>
      </table>

So - to modify the title bar we will act on those classes by changing the
background color, removing background images, adjusting the padding and
font, etc.

|Before                                  |After                               |
|.toolTitle{                             |.toolTitle{width:100%}              |
|width:100%;                             |                                    |
|background: url(images/titleback.gif)   |                                    |
|repeat-x top  left}                     |                                    |
|.toolTitle td.title{                    |.toolTitle td.title{                |
|padding: 2px 4px 2px 22px;              |padding: 2px 4px 6px 0;             |
|background:url(images/titleleft.gif) top|height:1em;                         |
|left no-repeat;                         |font-size: 120%;                    |
|height:22px;                            |color: #5A6D95;                     |
|font: normal bold 12px Arial,           |}                                   |
|sans-serif;                             |                                    |
|color: #5A6D95;                         |                                    |
|text-transform: uppercase;              |                                    |
|}                                       |                                    |
|.toolTitle td.action{                   |.toolTitle td.action{               |
|background:url(images/titleright.gif)   |padding: 2px 4px 6px 2px;           |
|top right no-repeat;                    |text-align:right;                   |
|padding:3px 22px 2px 2px;               |vertical-align:middle;              |
|text-align:right;                       |}                                   |
|vertical-align:middle;                  |                                    |
|}                                       |                                    |

It remains to change the images that serve as anchors to reload the tool
and invoke the contextual help. The portal renders in the response only one
image inside each of the <a>'s - a transparent gif - the skin overlays that
with a background image to the <a> child of each of the cells above. All
that is needed is to provide the new skin with new images - these are
called

reload.gif
reload_h.gif
help.gif
help_h.gif

and they live in the images directory, naturally. The "_h" variant is the
image displayed on the hover of each <a>

And here is the whole portal. All that remains is the tool skin.

[pic]

I have glossed over many things that you might want to address. Here is a
list with a description of what they are. Elements are identified here by
class or id.

|#presence   |This is the iframe that shows who is in the site. Again|
|            |- to affect the actual content of this iframe you will |
|            |have to modify new_skin/tool.css                       |
|#pres_title |The title of the above iframe                          |
|#siteType   |A <p> that displays the string "Project" when          |
|            |appropriate                                            |
|#siteStatus |A <p> that displays the string "Unpublished" when      |
|            |appropriate. In the default Sakai skin this is highly  |
|            |decorated as it provides important info.               |
|#divLogo    |A block wrapping the display of an image that a site   |
|            |owner might want to display above the tool navigation. |

Note reminder: There are 2 elements that are seem to be parts of the
portal, but are dealt with in the tool css - tool titles (see above) and
the presence iframe contents.

Appendix A- block structure diagram






[pic]

Appendix B- customizing for site types


With Sakai 2.01 the portal is "site type aware." What this means in
practical terms is that you can customize, within the same skin, within the
same css, how different sites will look.

The handle that will allow us to do this is emitted in the response in two
places: in the block wrapping the tabs, and in the block wrapping the
container (tool links + tool areas):

      <div class="tabHolder workspace">
      <div id="container" class="workspace">

In the first instance, it is an added class to the tabHolder block. In the
second it is in a new class to the container block. Care has been taken to
ensure that if the skins do not address these extras no side effects are
experienced - there is always a default.

To take advantage of this, after the default has been defined, you can
contextually address the same element with the added selector. For example,
let us say that in our example above we want sites that are of the
workspace type to have yellow text as the tab text. This is a trivial
example, of course, and if your aim is to differentiate to provide users
with visual cues as to "where they are at" other things would be more
appropriate.

Here is the default:

#tabNavigation .selectedTab a,#tabNavigation .selectedTab
a:link,#tabNavigation .selectedTab a:visited, #tabNavigation .selectedTab
a:hover
{
      color:#9C6;
      font-weight: bold;
      padding:3px 5px 5px 5px
}

Here is the workspace treatment:

.workspace table .tabCell #tabNavigation .selectedTab a,.workspace table
.tabCell #tabNavigation .selectedTab a:link,.workspace table .tabCell
#tabNavigation .selectedTab a:visited,.workspace table .tabCell
#tabNavigation .selectedTab a:hover
{
      color:# FF0;
}

Similar things can be done to any child of the #container block. As an
unimaginative  illustration, let's make the presence paraphernalia
disappear when the user is in her workspace (after all, who else would
possibly be present in her workspace?). After the default definitions, we
will insert:

.workspace #presence {display:none}
.workspace #pres_title  {display:none}

Keep in mind that your installation in your institution may have different
site types, as by design this is an open ended customizable component (this
is the main reason that the default stylesheet does not address this
issue). Standard types can be workspace, course and project, but others can
be added, and these can be deleted.  If you do not address them, everything
will be fine, but you can if needed.

Appendix C- helpful links


Sakai installation


Get the demo version if you are primarily a UI designer. If you are
comfortable with administering Tomcat, running Maven, etc. you can get the
source and build it.

If you are OK with jiggery-pokering further or have someone that can help
you, consider going the source route as well as changing the default
database (the in memory HSQL used in the demo version) to MySQL. The
ability to preserve your data between sessions will make your life
considerably easier.

There are detailed readmes associated with each of the versions - these are
crucial. All info is available here:

http://cvs.sakaiproject.org/release/2.0.0/

Support


Get help at:
      http://collab.sakaiproject.org/portal
Get info at:
      http://bugs.sakaiproject.org/confluence
      (as of June 22/05 only info on Sakai 1.5 - soon change)
And:
      http://www.sakaiproject.org/
      Specially:
           http://www.sakaiproject.org/index.php?option=com_content&task=blo
           gcategory&id=141&Itemid=258

Demonstration files

The files used to create the new skin are in
http://bugs.sakaiproject.org/confluence (and then search for "skin"). Each
example consists of:

    . portal.css
    . tool.css
    . and some images in the images directory

These are available in the euphoria folder in the sak2skin-examplefiles.zip
file, on the same page in Confluence as this guide will be. Another folder
in the sak2skin-examplefiles.zip file is rtl.  It is basically the same
skin as euphoria but roughly adjusted for right to left language
situations. Emphasis on "roughly" - it represents only about 30 minutes of
work and an area we could use some assistance with.

Appendix D- Post 2.0 changes


This appendix will collect changes of note that took place post version
2.0, so that folks that implemented skins on the basis of what 2.0 had can
consult and modify as needed. I will also try to find another venue that is
more immediate and appropriate.

2.0.1


The major portal changes for this version where a number of improvements
for accessibility. A number of nodes (<a> and <hn>) where added that are
readable to screen readers, but render off-screen under other
circumstances. The mechanism for this is the addition to a new class to the
portal.css:

   .skip  {
      position:absolute; top:-999px;
      left:-999px; height:0;width:0
   }

Without this selector in the css the additions will be visible, with bad
effects.

The tool.css was also affected - will be treated in the other document as
well as here. The issue in that case was that the tool title (inside of the
tool title iframe) became an <h2> - this needs to be treated in the tool
css by overriding the default rendering of <h2> - in the case of Euphoria
University:

      .toolTitle td.title h2{
           margin:0;
           padding:0;
           display:inline;
      }

You may want to adjust the font-size, font-weight, color, etc. The
important part is to make <h2> behave like a bit of inline text instead as
a block.
[pic]
-----------------------
.siteNavBlock

.mast-head

td.right

td.middle

td.left

.tabHolder

.tabHolder table

.selectCell

.tabCell

ul.tabNavigation

#container

#sidebar

#content

.portletTitleWrap

.portletMainWrap

.portletTitleIFrame

.portletMainIFrame

.leftnavlozenge

.leftnavlozenge ul

iframe.presence

#footer

#footerInfo

#footerExtNav


